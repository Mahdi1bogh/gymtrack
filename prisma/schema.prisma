generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  name          String?
  role          Role           @default(CUSTOMER)
  vendor        Vendor?
  workoutPlans  WorkoutPlan[]
  nutritionPlans NutritionPlan[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Vendor {
  id            String    @id @default(cuid())
  userId        String    @unique
  user          User      @relation(fields: [userId], references: [id])
  businessName  String
  description   String?
  products      Product[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Float
  stock       Int      @default(0)
  vendorId    String
  vendor      Vendor   @relation(fields: [vendorId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model WorkoutPlan {
  id          String       @id @default(cuid())
  name        String
  description String?
  userId      String
  user        User         @relation(fields: [userId], references: [id])
  workouts    Workout[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Workout {
  id            String       @id @default(cuid())
  name          String
  description   String?
  workoutPlanId String
  workoutPlan   WorkoutPlan @relation(fields: [workoutPlanId], references: [id])
  exercises     Exercise[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Exercise {
  id          String    @id @default(cuid())
  name        String
  description String?
  sets        Set[]
  workoutId   String
  workout     Workout   @relation(fields: [workoutId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Set {
  id          String    @id @default(cuid())
  reps        Int
  weight      Float?
  exerciseId  String
  exercise    Exercise  @relation(fields: [exerciseId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model NutritionPlan {
  id          String       @id @default(cuid())
  name        String
  description String?
  userId      String
  user        User         @relation(fields: [userId], references: [id])
  meals       Meal[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Meal {
  id              String        @id @default(cuid())
  name            String
  description     String?
  nutritionPlanId String
  nutritionPlan   NutritionPlan @relation(fields: [nutritionPlanId], references: [id])
  foods           Food[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Food {
  id          String   @id @default(cuid())
  name        String
  calories    Int
  protein     Float?
  carbs       Float?
  fat         Float?
  mealId      String
  meal        Meal     @relation(fields: [mealId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum Role {
  ADMIN
  VENDOR
  CUSTOMER
} 